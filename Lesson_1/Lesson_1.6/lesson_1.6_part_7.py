"""
1.6 Магический метод __new__. Пример паттерна Singleton

Видео-разбор подвига (решение смотреть только после своей попытки): https://youtu.be/uE1uf7Qtbh4
Подвиг 7. Объявите класс SingletonFive, с помощью которого можно было бы создавать объекты командой:

a = SingletonFive(<наименование>)
Здесь <наименование> - это данные, которые сохраняются в локальном свойстве name созданного объекта.
Этот класс должен формировать только первые пять объектов. Остальные (шестой, седьмой и т.д.)
должны быть ссылкой на последний (пятый) созданный объект.

Создайте первые десять объектов класса SingletonFive с помощью следующего фрагмента программы:
objs = [SingletonFive(str(n)) for n in range(10)]
P.S. В программе на экран ничего выводить не нужно.
"""
class SingletonFive:
    __instance = [] #Создаем словарь для хранения данных

    def __new__(cls, *args, **kwargs): # Функция которая запускается до создания экзепляра класса
        if len(cls.__instance) < 5: # Если в списке еще нет 5 элементов то создаем новый экземпляр
            cls.obj = super().__new__(cls)
            cls.__instance.append(cls.obj) # Если в списке еще нет 5 элементов то создаем новый экземпляр
            return cls.obj # Возвращаем новый экземпляр класса
        else:
            return cls.__instance[4] #Если уже есть 6 экзепляров то мы возвращаем ссылку на последний

    def __init__(self, name):
        self.name = name


objs = [SingletonFive(str(n)) for n in range(10)]

for index, val in enumerate(objs):
    print(f"{index} = {id(val)}")

